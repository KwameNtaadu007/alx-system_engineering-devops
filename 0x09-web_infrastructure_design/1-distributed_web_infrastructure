1. Distributed web infrastructure
This design implements a three-server web infrastructure to host the website www.foobar.com. The infrastructure includes one web servers, one application server, one load balancer (HAproxy), one set of application files (code base), and one database (MySQL). It addresses the limitations of the previous single-server setup and provides better performance, fault tolerance, and scalability.

 **Components and their Roles**

1. **Server 1**:
   - Web Server: Nginx
   - Application Server
   - Application Files (Code Base)

2. **Server 2**:
   - Database: MySQL (Primary)

3. **Server 3**:
   - Load Balancer: HAproxy
   - Database: MySQL (Replica)

![screenshote](https://drive.google.com/file/d/1BhEcBn4CdK8jS9Q9IWfjhtvbh8tBfln_/view?usp=sharing)

**Web Server and Application Server (Server 1)**:
- Web Server (Nginx): It handles incoming HTTP requests and serves static content while also forwarding dynamic requests to the application server.
- Application Server: It hosts the web application's codebase, processes dynamic content, and communicates with the database server.
- Application Files: These are the code and files that make up the website and its functionality.

**Database (Server 2 and Server 3)**:
- Primary Database (Server 2): This server hosts the primary (master) database. It's responsible for handling write operations.
- Replica Database (Server 3): This server hosts a replica (slave) database. It receives data from the primary database and can handle read operations. This setup allows for data redundancy and load distribution.

**Load Balancer (Server 3)**:
- HAproxy: It distributes incoming user requests across the two application servers for load balancing and high availability.

**Distribution Algorithm**:
- The load balancer (HAproxy) is configured with a Round Robin distribution algorithm. This means that each incoming request is forwarded to the next available application server in a circular order. This approach ensures an even distribution of requests among the application servers.

**Active-Active vs. Active-Passive**:
- This infrastructure employs an Active-Active setup. Both the primary and replica databases are actively serving traffic. In contrast, an Active-Passive setup would have one database (either primary or replica) actively serving traffic while the other is in standby mode, ready to take over if the active one fails. Active-Active provides better read scaling and redundancy, but it can be more complex to set up.

**Database Primary-Replica Cluster**:
- The primary-replica cluster (Master-Slave) setup is used to ensure data redundancy, fault tolerance, and load distribution. The primary database handles write operations and replicates data to the replica database, which handles read operations. This setup enhances data availability and performance.

**Difference between Primary and Replica**:
- The primary database is responsible for handling write operations, ensuring data consistency. It's the authoritative source for data changes.
- The replica database primarily handles read operations, reducing the load on the primary database and improving read performance. It contains a copy of the data from the primary database and is used for redundancy and scalability.

**Issues with the Infrastructure**:
1. **Single Point of Failure (SPOF)**: There is still a single point of failure in the load balancer. If the load balancer fails, it can disrupt traffic distribution.
2. **Security Issues**: The design does not include a firewall or HTTPS, which can leave the infrastructure vulnerable to security threats.
3. **No Monitoring**: There's a lack of monitoring tools and practices, making it challenging to detect and respond to issues promptly.


