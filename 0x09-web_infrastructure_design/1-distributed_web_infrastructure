1. Distributed web infrastructure

This design implements a three-server web infrastructure to host the website www.foobar.com. The infrastructure includes two web servers, one application server, one load balancer (HAproxy), one set of application files (code base), and one database (MySQL). It addresses the limitations of the previous single-server setup and provides better performance, fault tolerance, and scalability.

https://drive.google.com/file/d/1LyfE7ZF949TT51fsdt914kgdm0ksfwRq/view?usp=sharing

## Components and their Roles

1. Server 1 (Linux):
   - The first server hosts the operating system (Linux) and acts as a web server (Nginx) and an application server.
   - Nginx handles incoming HTTP requests and forwards dynamic content requests to the application server.
   - The application server processes these dynamic requests, interacts with the database, and generates responses.

2. Server 2 (Linux):
   - The second server acts as a web server (Nginx) and an application server, similar to Server 1.
   - Having two servers allows for redundancy and load balancing, improving performance and high availability.

3. Load Balancer (HAproxy):
   - The load balancer distributes incoming traffic across multiple web servers (Server 1 and Server 2).
   - It uses a distribution algorithm (round-robin, least connections, etc.) to evenly distribute requests among the servers, preventing overloading on a single server.

4. Application Files (Code Base):
   - The code base contains the website's application files, including HTML, CSS, PHP scripts, and other necessary resources.
   - Both Server 1 and Server 2 use the same code base to ensure consistency across the web servers.

5. Database (MySQL Primary-Replica Cluster):
   - The database implements a Primary-Replica (Master-Slave) cluster to improve database performance and redundancy.
   - The Primary node handles both read and write operations, while the Replica node(s) asynchronously replicate data from the Primary node.
   - This setup allows for load balancing of read queries across multiple Replica nodes.

## Specifics about the Infrastructure

Reasons for Additional Elements:

- Server 2: Adding a second server provides redundancy and load balancing, improving the website's performance and fault tolerance. It ensures that if one server fails, the other can handle incoming traffic.
- Load Balancer (HAproxy): Introducing a load balancer that distributes incoming traffic across multiple servers, preventing overloading and enabling horizontal scaling.
- Database Primary-Replica Cluster: This configuration enhances database performance by offloading read queries to the Replica node(s) while maintaining data redundancy and high availability.

Load Balancer Distribution Algorithm:

The load balancer (HAproxy) is configured with a "round-robin" distribution algorithm. It evenly distributes incoming requests to each web server in a circular manner. This ensures that each server receives an equal share of traffic, providing a fair distribution of workloads.

Active-Active vs. Active-Passive Setup:

- Active-Active Setup: In an Active-Active setup, both web servers (Server 1 and Server 2) are actively handling incoming traffic simultaneously. The load balancer distributes requests among the active servers, providing better performance and redundancy.
- Active-Passive Setup: In an Active-Passive setup, one server (typically Server 1) actively handles incoming traffic, while the other server (Server 2) remains in a standby or passive state. If the active server fails, the load balancer redirects traffic to the passive server, ensuring high availability but utilizing only one server at a time.

Database Primary-Replica Cluster:

In a Primary-Replica cluster, the Primary node handles both read and write operations, making it the authoritative source for data. The Replica node(s) asynchronously replicate data from the Primary node, ensuring data redundancy.

Difference between Primary and Replica Nodes:

- Primary Node: The Primary node is responsible for handling both read and write operations from the application. It is the authoritative source for data and ensures consistency across the database.
- Replica Node: The Replica node(s) are read-only copies of the Primary node. They asynchronously replicate data from the Primary node to offload read queries, improving overall database performance and scalability. The application uses the Replica nodes for read-heavy operations, reducing the load on the Primary node.

## Issues with the Infrastructure

- Single Point of Failure (SPOF): The load balancer itself can become a single point of failure. If the load balancer fails, it can disrupt access to the website. To address this, introducing a redundant load balancer can help ensure high availability.
- Security Issues: The infrastructure lacks proper security measures such as a firewall and HTTPS encryption. This can expose the system to potential cyber threats and data breaches. Implementing a firewall and enabling HTTPS encryption is crucial to safeguarding the infrastructure and user data.
- No Monitoring: The lack of monitoring tools means there is no visibility into the health and performance of the infrastructure. Monitoring tools are essential for identifying issues, troubleshooting, and optimizing the system for better performance and reliability.


