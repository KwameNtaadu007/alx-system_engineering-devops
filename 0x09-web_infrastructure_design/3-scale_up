
This design expands the previous infrastructure to include one more server, separating the components (web server, application server, and database) onto their own servers. It also configures the load balancer (HAproxy) as a cluster to enhance performance, fault tolerance, and scalability.

 **Components and their Roles**

**Server 1**:
- Web Server: Nginx
- Firewall
- SSL Termination
- Monitoring Client
- HAproxy Node 1 (Load Balancer)

**Server 2**:
- Application Server
- Firewall
- Monitoring Client
- HAproxy Node 2 (Load Balancer)

**Server 3**:
- Database: MySQL
- Firewall
- Monitoring Client

//Diagram

1. **Web Server (Server 1)**:
   - The web server (Nginx) is responsible for handling HTTP requests, serving static content, and acting as the entry point for user traffic.
   - SSL termination at the web server is responsible for decrypting incoming HTTPS requests.
   - A monitoring client collects server metrics and performance data to ensure the web server's health.
   - HAproxy Node 1 is one of the load balancer nodes that will distribute traffic between the web and application servers.

2. **Application Server (Server 2)**:
   - The application server hosts the application code and processes dynamic content generation.
   - A firewall is used to control and secure incoming and outgoing traffic to the application server.
   - A monitoring client collects metrics and performance data to monitor the health of the application server.
   - HAproxy Node 2 is the second node of the load balancer cluster, ensuring high availability for the application layer.

3. **Database Server (Server 3)**:
   - The database server (MySQL) is responsible for storing and managing the website's data.
   - A firewall is used to control and secure incoming and outgoing database traffic.
   - A monitoring client collects metrics and performance data to monitor the health of the database server.

**Why These Components**:

- **Web Server and Application Server Separation**: Separating the web server and application server allows for scalability and load distribution. The web server can serve static content efficiently, while the application server can handle dynamic content generation, ensuring better performance.

- **Load Balancer Cluster**: Using HAproxy configured as a cluster (Node 1 and Node 2) ensures high availability and load distribution. If one node fails, the other can take over, providing fault tolerance.

- **Firewalls**: Firewalls are added to control and secure incoming and outgoing traffic to the web, application, and database servers, enhancing security.

- **SSL Termination**: SSL termination at the web server allows for efficient handling of HTTPS traffic. The web server decrypts incoming requests and forwards them in plain text to the application server for processing.

- **Monitoring**: Monitoring clients are essential for tracking the health and performance of each component. They collect metrics, logs, and other data, which are sent to a monitoring service for analysis and alerting in case of issues.

By separating components, configuring a load balancer cluster, and implementing firewalls and monitoring, this infrastructure is better prepared for scaling up, ensuring high availability, and providing a more secure and reliable service.
