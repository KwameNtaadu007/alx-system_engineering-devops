**Design of a Three-Server Secured Web Infrastructure**

## Overview

This design illustrates a three-server web infrastructure to host the website www.foobar.com, focusing on security, encrypted traffic (HTTPS), and monitoring. The infrastructure includes three firewalls, an SSL certificate for HTTPS encryption, and monitoring clients for data collection.

## Components and their Roles

1. **Server 1 (Linux):**
   - Acts as a web server (Nginx) and an application server to serve www.foobar.com.
   - Hosts the website's codebase and handles dynamic content requests.

2. **Server 2 (Linux):**
   - Similar to Server 1, acts as a web server (Nginx) and an application server.
   - Provides redundancy and load balancing to improve performance and high availability.

3. **Server 3 (Linux):**
   - Functions as the MySQL database server, providing data storage and retrieval capabilities.
   - Implements a Primary-Replica (Master-Slave) cluster to enhance data redundancy and database performance.

4. **Load Balancer (HAproxy):**
   - Distributes incoming traffic across the web servers (Server 1 and Server 2) for load balancing and fault tolerance.

5. **Firewalls:**
   - Each server has a firewall to control incoming and outgoing network traffic.
   - Firewalls enhance the infrastructure's security by blocking unauthorized access attempts and mitigating potential threats.

6. **SSL Certificate:**
   - Installed on the web servers (Server 1 and Server 2) to enable HTTPS encryption for secure data transmission.
   - HTTPS ensures data confidentiality, authenticity, and integrity, protecting sensitive information during transit.

7. **Monitoring Clients (Data Collectors):**
   - Monitoring clients are installed on each server to collect and send performance and health data to a central monitoring service (e.g., Sumologic).
   - Monitoring enables real-time visibility into the infrastructure's health, aiding in issue detection, troubleshooting, and optimization.

## Specifics about the Infrastructure

**Reasons for Additional Elements:**

- **Firewalls:** Adding firewalls ensures a strong security posture. Firewalls filter network traffic based on predefined rules, preventing unauthorized access and protecting against various types of attacks.
- **HTTPS Encryption:** Serving traffic over HTTPS encrypts data during transit, safeguarding it from interception and manipulation by malicious entities.
- **Monitoring Clients (Data Collectors):** Monitoring enables continuous observation of server performance, resource utilization, and potential issues. It provides insights into the infrastructure's health, enabling proactive management and early problem detection.

**Firewalls:**

Firewalls are security mechanisms used to filter and control network traffic. They act as a barrier between the internet and internal network, allowing only authorized traffic and blocking potentially harmful or malicious traffic.

**Traffic Served over HTTPS:**

HTTPS ensures secure communication between the web server and the client's browser. It encrypts data transmitted between the two endpoints, preventing eavesdropping and maintaining data integrity.

**Monitoring:**

Monitoring is the continuous process of tracking the infrastructure's performance and health. It involves collecting and analyzing data on various metrics, such as CPU usage, memory, network traffic, response times, and error rates.

**Monitoring Data Collection:**

Monitoring clients (data collectors) are installed on each server to collect performance metrics. These clients periodically send data to a central monitoring service, such as Sumologic, where it is aggregated and analyzed.

**Monitoring Web Server QPS:**

To monitor the web server's Queries Per Second (QPS), the monitoring tool collects data on the number of incoming requests per unit of time. The QPS metric provides insight into the server's workload and performance.

## Issues with the Infrastructure

**Terminating SSL at the Load Balancer Level:**

Terminating SSL at the load balancer level can expose internal communication between the load balancer and web servers. This internal traffic remains unencrypted, potentially leading to security risks and data exposure.

**Single MySQL Server Accepting Writes:**

Having only one MySQL server capable of accepting writes creates a Single Point of Failure (SPOF). If the primary database server fails, write operations become unavailable, leading to potential data loss and downtime.

**Servers with the Same Components:**

Using servers with the same components (database, web server, and application server) might result in resource imbalance and inefficient resource utilization. Different server roles allow for optimized resource allocation, better fault isolation, and scalability. A diverse setup ensures that a failure in one component doesn't affect the entire infrastructure.
